name: 📸 Captura Semanal - SOLO MANUAL

# SOLO EJECUCIÓN MANUAL - SIN AUTOMATIZACIÓN
on:
  # Permitir SOLO ejecución manual desde GitHub
  workflow_dispatch:
    inputs:
      max_workers:
        description: 'Número de capturas simultáneas (1-3)'
        required: false
        default: '1'
        type: choice
        options:
        - '1'
        - '2'
        - '3'

jobs:
  capture-websites:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 🛒 Descargar código del repositorio
      uses: actions/checkout@v4
      
    - name: 🐍 Configurar Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 🟢 Configurar Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 📦 Instalar SingleFile CLI automáticamente
      run: |
        echo "🔧 Instalando SingleFile CLI..."
        npm install -g single-file-cli
        echo "✅ SingleFile CLI instalado:"
        single-file --version
        
    - name: 🌐 Instalar Chrome para capturas
      run: |
        echo "🔧 Instalando Google Chrome..."
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        echo "✅ Chrome instalado:"
        google-chrome --version
        
    - name: 📋 Validar configuración
      run: |
        echo "🔍 Verificando archivos necesarios..."
        
        if [ ! -f "config/urls.json" ]; then
          echo "❌ ERROR: config/urls.json no encontrado"
          echo "💡 Crea este archivo con tus URLs"
          exit 1
        fi
        
        if [ ! -f "scripts/capture.py" ]; then
          echo "❌ ERROR: scripts/capture.py no encontrado"
          exit 1
        fi
        
        # Contar URLs configuradas
        urls_count=$(python3 -c "
import json
try:
    with open('config/urls.json', 'r') as f:
        config = json.load(f)
    print(len(config.get('urls', {})))
except:
    print(0)
")
        
        echo "✅ Configuración válida"
        echo "📊 URLs configuradas: $urls_count"
        
        if [ "$urls_count" -eq "0" ]; then
          echo "⚠️ ADVERTENCIA: No hay URLs configuradas"
        fi
        
    - name: 📸 Ejecutar capturas MANUALES
      env:
        MAX_WORKERS: ${{ github.event.inputs.max_workers || '1' }}
      run: |
        echo "🧪 EJECUTANDO PRUEBA MANUAL"
        echo "================================"
        echo "⚙️ Workers simultáneos: $MAX_WORKERS"
        echo "📅 Fecha: $(date)"
        echo "🎯 Modo: SOLO PRUEBA (no automático)"
        echo ""
        
        python3 scripts/capture.py --max-workers $MAX_WORKERS
        
    - name: 📊 Generar reportes de prueba
      if: always()
      run: |
        echo "📋 Generando reportes de prueba..."
        
        # NO actualizar README en modo prueba
        echo "ℹ️ Saltando actualización de README (modo prueba)"
        
        # Mostrar resumen en logs
        if [ -f "capturas/latest/report.json" ]; then
          echo ""
          echo "📊 RESUMEN DE PRUEBA:"
          echo "====================="
          python3 -c "
import json
try:
    with open('capturas/latest/report.json', 'r') as f:
        data = json.load(f)
    stats = data.get('estadisticas', {})
    print(f'✅ Exitosas: {stats.get("exitosas", 0)}')
    print(f'❌ Fallidas: {stats.get("fallidas", 0)}')
    print(f'⏱️ Tiempo total: {stats.get("tiempo_total_segundos", 0):.1f}s')
    print(f'💾 Tamaño total: {stats.get("tamaño_total_mb", 0):.1f} MB')
except Exception as e:
    print(f'Error leyendo reporte: {e}')
"
        fi
        
    - name: 📦 Crear archivo comprimido de prueba
      if: success()
      run: |
        echo "📦 Creando archivo de prueba..."
        
        if [ -d "capturas" ]; then
          fecha=$(date +%Y-%m-%d-%H%M)
          zip_name="PRUEBA-capturas-$fecha"
          
          cd capturas
          zip -r "../$zip_name.zip" . -i "*.html" "*.json" "*.md"
          cd ..
          
          echo "✅ Archivo de prueba creado: $zip_name.zip"
          
          if [ -f "$zip_name.zip" ]; then
            size_mb=$(du -m "$zip_name.zip" | cut -f1)
            echo "📦 Tamaño del ZIP de prueba: ${size_mb}MB"
          fi
        fi
        
    - name: 📤 Subir capturas de prueba
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: PRUEBA-capturas-${{ github.run_number }}
        path: |
          PRUEBA-*.zip
          capturas/latest/
        retention-days: 7
        compression-level: 0
        
    - name: ✅ Resumen de prueba
      if: always()
      run: |
        echo ""
        echo "🧪 ========================================"
        echo "    PRUEBA MANUAL COMPLETADA"
        echo "========================================"
        echo ""
        echo "📅 Fecha: $(date)"
        echo "🎯 Modo: SOLO PRUEBA MANUAL"
        echo "🔢 Ejecución: #${{ github.run_number }}"
        echo ""
        echo "📊 Para ver resultados:"
        echo "   • Descarga 'PRUEBA-capturas-XXX' en Artifacts"
        echo "   • Revisa las capturas en el ZIP"
        echo ""
        echo "🚀 Si funciona bien:"
        echo "   • Puedes habilitar la automatización semanal"
        echo "   • O seguir ejecutando manualmente cuando necesites"
        echo ""
